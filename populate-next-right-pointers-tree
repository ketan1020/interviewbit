/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
void Solution::connect(TreeLinkNode* A) {
    TreeLinkNode* X=A;
    queue<TreeLinkNode*> q1,q2;
    
    int i=0;
    q1.push(X);
    while(!q1.empty() || !q2.empty())
    {
        if(i%2==0)
        {
            while(!q1.empty())
            {
                if(q1.size()==1)
                {
                    TreeLinkNode* temp=q1.front();
                    temp->next=NULL;
                    q1.pop();
                    if(temp->left!=NULL)
                        q2.push(temp->left);
                    if(temp->right!=NULL)
                        q2.push(temp->right);
                }
                else
                {
                    TreeLinkNode* temp=q1.front();
                     q1.pop();
                    temp->next=q1.front();
                   
                    if(temp->left!=NULL)
                        q2.push(temp->left);
                    if(temp->right!=NULL)
                        q2.push(temp->right);
                }
            }
            i++;
        }
        else
        {
            while(!q2.empty())
            {
                if(q2.size()==1)
                {
                    TreeLinkNode* temp=q2.front();
                    temp->next=NULL;
                    q2.pop();
                    if(temp->left!=NULL)
                        q1.push(temp->left);
                    if(temp->right!=NULL)
                        q1.push(temp->right);
                }
                else
                {
                    TreeLinkNode* temp=q2.front();
                     q2.pop();
                    temp->next=q2.front();
                   
                    if(temp->left!=NULL)
                        q1.push(temp->left);
                    if(temp->right!=NULL)
                        q1.push(temp->right);
                }
            }
            i++;
        }
    }
}
